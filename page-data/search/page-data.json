{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"문제 AWS MWAA 에 custom xcom backend를 등록하기 위해  적용 시\n클러스터 업데이트 실패 해결 1. airflow.cfg 옵션 변경 실패에 대한 디버깅 이슈 재현 local에 mwaa 환경 구축 후  적용시 클러스터 상태 확인   확인 MWAA에서는 Config 실패로 인한 retry 등으로 API Timeout이 날 때 까지 오랜 …","fields":{"slug":"/mwaa-xcom-backend-config-issue/"},"frontmatter":{"date":"November 25, 2022","title":"AWS MWAA xcom backend configuration 이슈 해결","tags":["AWS","MWAA","Airflow"]},"rawMarkdownBody":"\n## 문제\n\n- AWS MWAA `airflow.cfg`에 custom xcom backend를 등록하기 위해 `core.xcom_backend:include.s3_xcom_backend.S3XComBackend` 적용 시\n  클러스터 업데이트 실패\n\n## 해결\n\n### 1. airflow.cfg 옵션 변경 실패에 대한 디버깅\n\n1. 이슈 재현\n    - local에 mwaa 환경 구축 후 `core.xcom_backend:include.s3_xcom_backend.S3XComBackend` 적용시 클러스터 상태 확인\n\n      ![](./2022-11-25-1.png)\n\n    - `AirflowConfigException: The object could not be loaded` 확인\n    - MWAA에서는 Config 실패로 인한 retry 등으로 API Timeout이 날 때 까지 오랜 시간 Cluster 상태가 `Updating`일 수 있습니다.\n\n2. 기본 값 적용시 내용 확인\n    - `\"core.xcom_backend\": \"airflow.models.xcom.BaseXCom\"`\n\n      → 성공\n\n      → Value값에 참조할 수 없는 값이 들어가면 실패하는 것을 유추할 수 있습니다\n\n3. `dags/` 폴더에 `s3_xcom_backend.py` 파일 생성 후 configuration 적용\n    - `\"core.xcom_backend\": \"s3_xcom_backend.S3XComBackend\"`\n\n   ![](./2022-11-25-2.png)\n\n   → **성공**\n\n### 2. MWAA Managed Node 접근 방법이 있을까?\n\n- Managed service이고 내부적으로 `Amazon ECS on Fargate`로 동작하기 때문에 airflow가 설치된 host의 shell로 접근할 수 있는 방법은 현재 존재하지 않습니다.\n- MWAA Architecture\n\n  ![](./2022-11-25-3.png)\n\n### 3. Airflow Configuration 변경 방법\n\n- 현재 MWAA에서는 airflow.cfg를 **직접적**으로 변경할 수 있는 방법을 제공하지 않습니다.\n- 가능한 방법은 아래 3가지 입니다.\n    1. `CFN`이나 `CDK`등 `IaC`를 사용하여 생성하거나 업데이트 할 때 옵션 반영\n        - `AirflowConfigurationOptions`\n    2. WEB UI를 통한 방법\n\n  ![](./2022-11-25-4.png)\n\n    3. AWS-CLI를 통한 방법\n\n    ```bash\n    #!/bin/bash\n    # update configuration\n    aws mwaa update-environment \\\n    --name xcom_backend_test \\\n    --airflow-configuration-options \"\"\"{\n      \\\"scheduler.dag_dir_list_interval\\\": \\\"5\\\",\n      \\\"scheduler.min_file_process_interval\\\": \\\"5\\\",\n      \\\"webserver.expose_config\\\": \\\"True\\\"\n      }\"\"\"\n      ```\n\n    ```bash\n    #!/bin/bash\n    # check configuration\n    aws mwaa get-environment \\\n    --name xcom_backend_test | \\\n    jq -r '.Environment.AirflowConfigurationOptions'\n    ```\n\n### 4. AWS-MWAA-LOCAL-RUNNER\n\n- MWAA 환경에 직접적인 접근은 어렵지만, [aws-mwaa-local-runner](https://github.com/aws/aws-mwaa-local-runner)를 통해 local에 MWAA를\n  mocking하여 테스트를 할 수 있습니다.\n\n  ```bash\n  1. /aws-mwaa-local-runner/docker/config/airflow.cfg 변경\n  2. ./mwaa-local-env build-image\n  3. ./mwaa-local-env start\n  4. airflow.cfg 반영 확인\n  ```\n\n### 5. 현재 MWAA에 적용된 airflow.cfg 값 및 환경변수 확인 방법\n\n- 여기에는 몇가지 방법이 있을 수 있습니다.\n\n1. 환경변수에서 확인\n\n  ```python\n  from __future__ import annotations\n\n  import logging\n  import os\n  from datetime import datetime, timedelta\n\n  from airflow import DAG\n  from airflow.operators.python import PythonOperator\n\n  logger = logging.getLogger(__name__)\n\n  with DAG(\n  'get_env_var',\n  default_args={\n    'depends_on_past': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=5)\n    },\n    description='check mwaa configuration',\n    start_date=datetime(2022, 11, 26),\n    catchup=False\n    ) as dag:\n    def print_env_vars():\n    keys = dict(os.environ)\n    for k, v in keys.items():\n    print(f'{k}: {v}')\n\n  get_env_vars_operator = PythonOperator(\n  task_id='get_env_vars_task',\n  python_callable=print_env_vars\n  )\n  ```\n\n2. airflow.cfg 파일에서 확인\n\n  ```python\n  from __future__ import annotations\n\n  import logging\n  import os\n  from datetime import datetime, timedelta\n\n  from airflow import DAG\n  from airflow.operators.python import PythonOperator\n\n  logger = logging.getLogger(__name__)\n\n  with DAG(\n  'get_airflow_cfg_file',\n  default_args={\n    'depends_on_past': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=5)\n    },\n    description='check mwaa configuration',\n    start_date=datetime(2022, 11, 26),\n    catchup=False\n    ) as dag:\n    def print_airflow_cfg():\n    with open(f\"{os.getenv('AIRFLOW_HOME')}/airflow.cfg\", 'r') as airflow_cfg:\n    file_contents = airflow_cfg.read()\n    print(f'\\n{file_contents}')\n\n  get_airflow_cfg_operator = PythonOperator(\n  task_id='get_airflow_cfg_task',\n  python_callable=print_airflow_cfg\n  )\n  ```\n\n3. airflow.configuration.conf 확인\n\n  ```python\n  from __future__ import annotations\n\n  import logging\n  from datetime import datetime, timedelta\n\n  from airflow import DAG\n  from airflow.configuration import conf\n  from airflow.operators.python import PythonOperator\n\n  logger = logging.getLogger(__name__)\n\n  with DAG(\n  'get_airflow_cfg',\n  default_args={\n    'depends_on_past': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=5)\n    },\n    description='check mwaa configuration',\n    start_date=datetime(2022, 11, 26),\n    catchup=False\n    ) as dag:\n    def get_conf_vars():\n    logging.info(\n    f\"AIRFLOW__CORE__XCOM_BACKEND: {conf.get(section='CORE', key='XCOM_BACKEND')}\"\n    )\n\n  get_conf_vars_operator = PythonOperator(\n  task_id='get_conf_vars_task',\n  python_callable=get_conf_vars\n  )\n  ```\n\n4. MWAA Web UI에서 확인\n\n- 진행 과정 요약\n- \"webserver.expose_config\": \"True” 값을 먼저 설정합니다.\n\n![](./2022-11-25-5.png)\n\n- MWAA Web UI → Admin → Configuration에 들어갑니다.\n\n![](./2022-11-25-6.png)\n\n- UI에서 airflow.cfg를 확인합니다\n\n![](./2022-11-25-7.png)\n\n## Summary\n\n- MWAA의 세팅 관련 참고할만한 자료입니다.\n    - [https://catalog.workshops.aws/amazon-mwaa-for-analytics/en-US](https://catalog.workshops.aws/amazon-mwaa-for-analytics/en-US)\n    - [https://catalog.workshops.aws/aws-data-ingestion-pipeline/ko-KR](https://catalog.workshops.aws/aws-data-ingestion-pipeline/ko-KR)\n- xcom_backend의 값으로 **참조 가능한 경로에 파일이 있어야만** 클러스터 정상 업데이트 가능합니다.\n- airflow.cfg 값을 호스트에 접근하여 직접적으로 변경할 수 있는 방법은 없습니다.\n- MWAA는 Managed service이기 때문에, 위에 설명드린 방법으로 우회하여 구조 등을 확인하실 수 있습니다.\n- 현재 MWAA에서는 만약 `잘못된 세팅값`으로 클러스터를 업데이트 시키면, 내부 요인에 의해 장시간 클러스터pending 상태가 될 수 있습니다. 이를 대비하는 방법은 아래와 같습니다.\n    - aws-mwaa-local-runner로 미리 구성을 확인합니다.\n    - Network or Permission 문제일 수도 있기 때문에 [링크와](https://github.com/awslabs/aws-support-tools/tree/master/MWAA) 같은 도구를\n      이용하는 것을 추천 드립니다.\n    - MWAA `23년 마일스톤`으로 클러스터 업데이트 구성 지연 이슈는 해결될 예정입니다.\n\n## References\n\n- [https://programmaticponderings.com/2020/12/29/amazon-managed-workflows-for-apache-airflow-configuration-understanding-amazon-mwaas-configuration-options/](https://programmaticponderings.com/2020/12/29/amazon-managed-workflows-for-apache-airflow-configuration-understanding-amazon-mwaas-configuration-options/)\n- [https://airflow.apache.org/docs/apache-airflow/2.2.2/configurations-ref.html](https://airflow.apache.org/docs/apache-airflow/2.2.2/configurations-ref.html)\n- [https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html#configuring-env-variables-airflow-ref](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html#configuring-env-variables-airflow-ref)\n- [https://docs.astronomer.io/learn/custom-xcom-backends](https://docs.astronomer.io/learn/custom-xcom-backends)\n- [https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html](https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html)"},{"excerpt":"1. 포스트 추가하기  경로에 새로운 마크다운 파일을 생성하여 여러분의 글을 추가할 수 있습니다. 1-1. 포스트 파일 구조 새로운 문서를 추가하는 방법에는 두가지가 있습니다. 첫번째는 디렉토리 없이 문서를 생성하는 방법입니다. 만약 여러분이 Javascript 에 관한 문서를 생성한다면,  파일을  디렉토리에 추가할 수 있습니다. 두번째 방법은 먼저 디…","fields":{"slug":"/writing-guide-kr/"},"frontmatter":{"date":"April 03, 2021","title":"🤔 3. 작성 가이드","tags":["hoodie","writing-guide"]},"rawMarkdownBody":"\n## 1. 포스트 추가하기\n\n`contents/post` 경로에 새로운 마크다운 파일을 생성하여 여러분의 글을 추가할 수 있습니다.\n\n### 1-1. 포스트 파일 구조\n\n새로운 문서를 추가하는 방법에는 두가지가 있습니다. 첫번째는 디렉토리 없이 문서를 생성하는 방법입니다. 만약 여러분이 Javascript 에 관한 문서를 생성한다면, `about-javascript.md` 파일을 `contents/posts` 디렉토리에 추가할 수 있습니다.\n\n두번째 방법은 먼저 디렉토리를 생성한 뒤, 디렉토리 안에 `index.md` 파일을 추가하는 것 입니다. 이 방법은 문서 내에 여러 이미지 파일 등 부수적인 파일 여러개가 포함되었을 때 유용합니다.\n\n첫번째 방법으로 생성한 파일명이나, 두번째 방법으로 생성한 디렉토리 이름은 웹사이트에서 고유의 주소를 갖습니다. `https://siteURL/about-javascript` 와 같이요.\n\n### 1-2. Frontmatter\n\n마크다운은 문서의 메타데이터인 Frontmatter 라 불리는 정보를 가지고 있습니다.\n\n```\n---\ntitle: \"🤔 3. 작성 가이드\"\ndescription: \"어떻게 글을 작성하고 추가할까요?\"\ndate: 2021-04-03\nupdate: 2021-04-03\ntags:\n  - hoodie\n  - writing-guide\nseries: \"gatsby-starter-hoodie 로 블로그 시작하기\"\n---\n```\n\n위는 지금 여러분이 읽고 있는 문서의 Frontmatter 입니다. `title` 과 `date` 는 필수 값입니다. 띄어쓰기를 포함된 문자열을 입력할 때에는 따옴표로 감싸는 것을 추천합니다.\n\n### 1-3. 마크다운 작성하기\n\n만약 Frontmatter 까지 작성했다면, 여러분은 그 아래에 마크다운 문서를 작성하면 됩니다. gatsby-starter-hoodie 는 대부분의 마크다운 문법을 지원합니다. 마크다운 작성 방법을 알고 싶다면, Github 의 [Mastering Markdown](https://guides.github.com/features/mastering-markdown/) 문서를 참고하세요.\n\n## 2. 코드 하이라이팅 & Katex\n\n### 2-1. 코드 하이라이팅\n\nPrism.JS 에 기반한 코드 하이라이팅이 제공됩니다.\n\n#### 예시\n\nJavascript\n\n```javascript\nconsole.log(\"Hello, world!\")\n```\n\nPython\n\n```python\nprint(\"Hello, world!\")\n```\n\n그 외 더 많은 언어를 제공합니다. 제공되는 언어를 확인하고 싶다면, [Prism.js 웹사이트](https://prismjs.com/) 를 참고하세요.\n\n### 2-2. Katex\n\nKatex 문법을 지원하여 복잡한 수식도 쉽게 표현할 수 있습니다.\n\n#### 인라인 모드\n\n$$E = m c^{2}$$\n\n#### 블럭 모드\n\n$$\n\\int_{0}^{\\infty} f(x) dx\n$$\n\n## 3. 글에 이미지 추가하기\n\n상대경로를 이용하여 쉽게 이미지를 추가할 수 있습니다. 디렉토리를 생성하고 그 안에 `index.md` 를 추가하여, 글을 추가하는 방법으로 작성해야 이미지 관리가 쉽습니다.\n\n![샘플 이미지 캡션](sample-image.jpg)\n\n이미지는 Lazy Loading 으로 로드되어, 빠른 초기 문서 로딩 속도를 확보할 수 있습니다.\n\n> ⚠ 이미지의 모든 확장자는 소문자여야합니다.\n\n## 4. 태그\n\n![](tag-example.jpg)\n\nFrontmatter 의 태그를 통해 쉽게 문서를 분류하고 검색할 수 있습니다. 여러분의 모든 태그는 `https://siteUrl/tags` 경로에서 확인하고, 검색할 수 있습니다.\n\n## 5. 시리즈\n\n![](series-example.jpg)\n\n여러분이 연관된 여러개의 문서를 작성할 때 시리즈를 사용할 수 있습니다. Frontmatter 에 작성된 시리즈가 같은 문서끼리 묶여 문서 상단에 리스트로 표시됩니다. 시리즈는 일련의 순서가 있는 문서들을 작성할 때 유용하게 사용할 수 있습니다. 시리즈는 문서의 작성 날짜 순서대로 정렬됩니다.\n\n현재 문서는 `gatsby-starter-hoodie 로 블로그 시작하기` 라는 시리즈로 설정되어 있습니다.\n"}]}},"pageContext":{}},"staticQueryHashes":[]}